#!/bin/bash

. /usr/share/libubox/jshn.sh

ENCODER_LOG="/var/log/koruza-test-homing-encoder.log"

log() {
  if [ "${quiet}" == "0" ]; then
    echo "$(date) $*"
  fi
}

log_always() {
  echo "$(date) $*"
}

get_current_status() {
  local status="$(ubus call koruza get_status)"

  json_load "${status}"
  json_get_vars connected
  json_select motors
  json_get_vars x y encoder_x encoder_y
}

wait_for_position() {
  local target_x="$1"
  local target_y="$2"

  log "Waiting for motors to finish moving to (${target_x}, ${target_y})."
  local last_x=0
  local last_y=0
  local stopped_times=0
  while ((1)); do
    get_current_status
    if [ "${connected}" != "1" ]; then
      log_always "WARNING: MCU disconnected while waiting for it to move. Ignored."
    fi

    if [[ "${x}" == "${target_x}" && "${y}" == "${target_y}" ]]; then
      break
    fi

    if [[ "${x}" == "${last_x}" && "${y}" == "${last_y}" ]]; then
      let stopped_times++

      if (( ${stopped_times} >= 5 )); then
        log "Motors have not moved for the last 5 seconds, considering the move done."
        log "Current motor position is (${x}, ${y})."
        break
      fi
    else
      let stopped_times=0
    fi

    let last_x=x
    let last_y=y

    sleep 1
  done
}

homing() {
  log "Homing."

  while ((1)); do
    ubus call koruza homing || exit 1
    wait_for_position 0 0
    get_current_status
    if [[ "${x}" == "0" && "${y}" == "0" ]]; then
      break
    fi

    log_always "WARNING: Homing failed. Retrying."
  done

  log "Homing completed."
}

move_to() {
  local x="$1"
  local y="$2"

  log "Request move to (${x}, ${y})."
  ubus call koruza move_motor "{\"x\": ${x}, \"y\": ${y}, \"z\": 0}" || exit 1
  wait_for_position ${x} ${y}
  log "Move completed."
}

# Must be root.
if [ "$UID" != "0" ]; then
  echo "ERROR: Must be root."
  exit 1
fi

get_current_status
if [ "${connected}" != "1" ]; then
  echo "ERROR: MCU is not connected."
  exit 1
fi

if [ "$1" == "quiet" ]; then
  quiet="1"
else
  quiet="0"
fi

# Ensure all subprocesses are killed on exit.
trap "exit" INT TERM
trap "kill 0" EXIT

# Start encoder logger in the background.
{
  rm -f ${ENCODER_LOG}
  while ((1)); do
    get_current_status
    log "x=${x} y=${y} encoder_x=${encoder_x} encoder_y=${encoder_y}" >> ${ENCODER_LOG}
    sleep 0.1
  done
} &

# Test sequence.
while ((1)); do
  log "Test sequence started."
  homing
  move_to 0 0

  log "Running first test sequence."
  for i in $(seq 1 20); do
    log "Running iteration ${i}."
    move_to 100 100
    move_to 100 -100
    move_to -100 -100
    move_to -100 100
    sleep 5
  done

  log "Running second test sequence."
  for i in $(seq 1 10); do
    log "Running iteration ${i}."
    move_to 1000 1000
    move_to -1000 -1000
    sleep 5
  done

  log "Running final test sequence."
  for i in $(seq 1 2); do
    log "Running iteration ${i}."
    move_to 10000 10000
    move_to -10000 -10000
    sleep 5
  done

  move_to -50000 -50000
  get_current_status
  log_always "Test run completed. Difference: x=$(( -25000 - ${x} )) y=$(( -25000 - ${y} ))."
done
